/** Copyright 2020 Alibaba Group Holding Limited.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef MODULES_BASIC_DS_DATAFRAME_MOD_H_
#define MODULES_BASIC_DS_DATAFRAME_MOD_H_

#include <algorithm>
#include <functional>
#include <map>
#include <memory>
#include <set>
#include <string>
#include <tuple>
#include <unordered_map>
#include <utility>
#include <vector>

#include "basic/ds/array.vineyard.h"
#include "basic/ds/arrow.vineyard.h"
#include "basic/ds/object_set.h"
#include "basic/ds/tensor.vineyard.h"
#include "client/client.h"
#include "client/ds/i_object.h"
#include "common/util/json.h"

namespace vineyard {

class DataFrameBaseBuilder;

class DataFrame : public Registered<DataFrame> {
 public:
  /**
   * @brief Get the column names.
   *
   * @return The vector of column names.
   */
  const std::vector<json>& Columns() const;

  /**
   * @brief Get the index of dataframe.
   *
   * @return The shared pointer to the index tensor.
   */
  std::shared_ptr<ITensor> Index() const;

  /**
   * @brief Get the column of the given column name.
   *
   * @param column The given column name.
   * @return The shared pointer to the column tensor.
   */
  std::shared_ptr<ITensor> Column(json const& column) const;

  /**
   * @brief Get the partition index of the global dataframe.
   *
   * @return The pair of the partition_index on rows and the partition_index on
   * columns.
   */
  const std::pair<size_t, size_t> partition_index() const;

  /**
   * @brief Get the shape of the dataframe.
   *
   * @return The pair of the number of rows and the number of columns.
   */
  const std::pair<size_t, size_t> shape() const;

 private:
  __attribute__((annotate("codegen"))) size_t partition_index_row_;
  __attribute__((annotate("codegen"))) size_t partition_index_column_;

  __attribute__((annotate("codegen"))) size_t row_batch_index_;

  __attribute__((annotate("codegen"))) std::vector<json> columns_;
  __attribute__((annotate("codegen:{json: ITensor*}")))
  std::map<json, std::shared_ptr<ITensor>>
      values_;

  friend class Client;
  friend class DataFrameBaseBuilder;
};

class GlobalDataFrameBaseBuilder;

class GlobalDataFrame : public Registered<GlobalDataFrame> {
 public:
  /**
   * @brief Set the partition shape of the global dataframe.
   *
   * @param partition_shape_row The number of partitions on rows.
   * @param partition_shape_column The number of partitions on columns.
   */
  const std::pair<size_t, size_t> partition_shape() const;

  /**
   * @brief Get the local partitions of the vineyard instance that is
   * connected from the client.
   *
   * @param client The client connected to a vineyard instance.
   * @return The vector of pointers to the local partitions.
   */
  const std::vector<std::shared_ptr<Object>>& LocalPartitions(
      Client& client) const;

  /**
   * @brief Get the local partitions stored in the given vineyard instance.
   *
   * @param instance_id The given ID of the vineyard instance.
   * @return The vector of pointers to the local partitions.
   */
  const std::vector<std::shared_ptr<Object>>& LocalPartitions(
      const InstanceID instance_id) const;

 private:
  __attribute__((annotate("codegen"))) size_t partition_shape_row_;
  __attribute__((annotate("codegen"))) size_t partition_shape_column_;

  __attribute__((annotate("codegen:ObjectSet"))) ObjectSet objects_;

  friend class Client;
  friend class GlobalDataFrameBaseBuilder;
};

}  // namespace vineyard

#endif  // MODULES_BASIC_DS_DATAFRAME_MOD_H_
